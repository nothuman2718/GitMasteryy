"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[560],{4145:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>g});var i=n(4848),r=n(8453);const a={},o="The90%Stuff",s={id:"The90Stuff",title:"The90%Stuff",description:"Contains the commands which we use most of the time.",source:"@site/docs/The90Stuff.md",sourceDirName:".",slug:"/The90Stuff",permalink:"/GitMasteryy/docs/The90Stuff",draft:!1,unlisted:!1,editUrl:"https://nothuman2718.github.io/GitMaster/docs/docs/The90Stuff.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The1%Stuff",permalink:"/GitMasteryy/docs/The1Stuff"},next:{title:"The9%Stuff",permalink:"/GitMasteryy/docs/The9Stuff"}},h={},g=[];function m(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"the90stuff",children:"The90%Stuff"}),"\n",(0,i.jsxs)(t.p,{children:["Contains the commands which we use ",(0,i.jsx)(t.strong,{children:"most of the time"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:'git init #Initilize a git repository\n\n#Staging Files\ngit add <file-name> #Add a file to the staging area\ngit add . #Add all the files to the staging area\ngit add *<pattern>* #Add all files containing a specific pattern to the staging area\n\n#Unstaging Files\ngit restore --staged <file-name> #Unstage a file\n\n#Viewing Status\ngit status #View the status of the files in the staging area\ngit status -s #View the status of the files in the staging area in a short format\n\n#Committing Changes\ngit commit -m "<commit-message>" #Commit the changes in the staging area\ngit commit -am "<commit-message>" #Skip the staging area\n\n#Viewing Local Changes\ngit diff #View the changes in the working directory\ngit diff --staged #View the changes in the staging area\ngit diff --cached #Same as --staged\n\n#Comparing Commits\ngit diff <commit-hash1>..<commit-hash2> #Compare two commits\n\n#Removing Files\ngit rm <file-name> #Remove a file from the working directory and the staging area\n\n#Viewing Commit History\ngit log #View the commit history\ngit log --oneline #View the commit history in a short format\ngit log --graph --oneline --all #View short commit hsitory but  all commits in graph\ngit log --reverse #Show in reverse order\ngit log -10 --reverse #See only last 10 commits in reverse order\ngit log <commit-hash1>..<commit-hash2> #See range of commits\ngit log --patch #See the actual changes in each commit\n\n#Viewing a Commit\ngit show <commit-hash> #View the changes in a commit\ngit show HEAD~2 #view commit two steps back\ngit show <commit-hash>:path/to/file #View specific file in a commit\n\n#Discarding Local Changes\ngit restore <file-name> #Discard changes in the working directory\ngit restore . #Discard all changes in the working directory\n\n#Ignoring Files\ntouch .gitignore #Create a .gitignore file\necho "<file-name>" >> .gitignore #Add files to .gitignore\necho "<pattern>" >> .gitignore #Add files to .gitignore\n\n#Detached HEAD State\ngit checkout <commit-hash> #Switch to a commit\n\n#Branching\ngit branch <branch-name> #Create a branch\ngit checkout <branch-name> #Switch to a branch\ngit switch <branch-name> #Newer way\ngit checkout -b <branch-name> #Create a branch and switch to it\ngit switch -C <branch-name> #Newer way\ngit branch -d <branch-name> #Delete a branch\ngit branch #View the branches\ngit branch --merged #View merged branches\ngit branch --no-merged #View unmerged branches\ngit branch -vv #View local and remote tracking branches\ngit push -u origin <branch-name> #Push a branch to the remote repository\ngit push origin --delete <branch-name> #Delete a branch from the remote repository\n\n#Merge a branch\ngit merge <branch-name>  #merges to current branch\ngit merge <branch-name> --no-ff #Merge a branch with --no-ff\ngit merge <branch-name> --ff-only #Merge a branch with --ff-only\ngit merge <branch-name> --squash #Merge a branch with --squash\ngit merge --abort #Abort a merge\ngit merge --continue #Continue a merge\n\n#Revert a merge\ngit revert -m 1 <commit-hash> #1 is the parent number of the commit\n\n#Rebasing\ngit rebase <branch-name>  #rebases current branch to <branch-name>\ngit rebase --abort #Abort a rebase\ngit rebase --continue #Continue a rebase\ngit rebase --skip #Skip a commit during rebase\ngit rebase -i <commit-hash> #Edit a commit during rebase\n\n#Collaborating\ngit clone <repository-url> #Clone a repository\ngit clone <repository-url> <local-repository-name> #Give name to the repository in local\n\n#Getting changes from remote\ngit fetch #Fetch the changes from the remote repository\ngit pull #Fetch the changes from the remote repository and merge them\ngit pull --rebase #Fetch the changes from the remote repository and rebase them\ngit push #Push the changes to the remote repository\n\n#Managing Remotes\ngit remote add <remote-name> <repository-url> #Add a remote repository\ngit remote #View the remote repositories\ngit remote -v #View the remote repositories in a verbose format\ngit remote rename <old-remote-name> <new-remote-name> #Rename a remote repository\n\n#Undoing commits\ngit reset --soft HEAD~1 #Undo the last commit\ngit reset HEAD~1 #Undo the last commit and unstage the changes\ngit reset --hard HEAD~1 #Undo the last commit and discard the changes\n\n'})})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var i=n(6540);const r={},a=i.createContext(r);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);